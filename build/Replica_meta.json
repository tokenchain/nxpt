{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint32","name":"_localDomain","type":"uint32"},{"internalType":"uint256","name":"_processGas","type":"uint256"},{"internalType":"uint256","name":"_reserveGas","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"oldRoot","type":"bytes32"},{"indexed":false,"internalType":"bytes32[2]","name":"newRoot","type":"bytes32[2]"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"signature2","type":"bytes"}],"name":"DoubleUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldUpdater","type":"address"},{"indexed":false,"internalType":"address","name":"newUpdater","type":"address"}],"name":"NewUpdater","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"messageHash","type":"bytes32"},{"indexed":true,"internalType":"bool","name":"success","type":"bool"},{"indexed":true,"internalType":"bytes","name":"returnData","type":"bytes"}],"name":"Process","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"previousConfirmAt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newConfirmAt","type":"uint256"}],"name":"SetConfirmation","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timeout","type":"uint256"}],"name":"SetOptimisticTimeout","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"homeDomain","type":"uint32"},{"indexed":true,"internalType":"bytes32","name":"oldRoot","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newRoot","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"signature","type":"bytes"}],"name":"Update","type":"event"},{"inputs":[],"name":"PROCESS_GAS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RESERVE_GAS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"}],"name":"acceptableRoot","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"committedRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"confirmAt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_oldRoot","type":"bytes32"},{"internalType":"bytes32[2]","name":"_newRoot","type":"bytes32[2]"},{"internalType":"bytes","name":"_signature","type":"bytes"},{"internalType":"bytes","name":"_signature2","type":"bytes"}],"name":"doubleUpdate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"homeDomainHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_remoteDomain","type":"uint32"},{"internalType":"address","name":"_updater","type":"address"},{"internalType":"bytes32","name":"_committedRoot","type":"bytes32"},{"internalType":"uint256","name":"_optimisticSeconds","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"messages","outputs":[{"internalType":"enum Replica.MessageStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"optimisticSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"process","outputs":[{"internalType":"bool","name":"_success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_leaf","type":"bytes32"},{"internalType":"bytes32[32]","name":"_proof","type":"bytes32[32]"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"prove","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes32[32]","name":"_proof","type":"bytes32[32]"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"proveAndProcess","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"remoteDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"},{"internalType":"uint256","name":"_confirmAt","type":"uint256"}],"name":"setConfirmation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_optimisticSeconds","type":"uint256"}],"name":"setOptimisticTimeout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_updater","type":"address"}],"name":"setUpdater","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"state","outputs":[{"internalType":"enum NomadBase.States","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_oldRoot","type":"bytes32"},{"internalType":"bytes32","name":"_newRoot","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"update","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updater","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Illusory Systems Inc.","events":{"Process(bytes32,bool,bytes)":{"params":{"messageHash":"Hash of message that failed to process","returnData":"the return data from the external call","success":"TRUE if the call was executed successfully, FALSE if the call reverted"}},"SetConfirmation(bytes32,uint256,uint256)":{"params":{"newConfirmAt":"The new value of confirmAt","previousConfirmAt":"The previous value of confirmAt","root":"The root for which confirmAt has been set"}},"SetOptimisticTimeout(uint256)":{"params":{"timeout":"The new value for optimistic timeout"}}},"kind":"dev","methods":{"acceptableRoot(bytes32)":{"params":{"_root":"the Merkle root, submitted in an update, to check"},"returns":{"_0":"TRUE iff root has been submitted & timeout has expired"}},"doubleUpdate(bytes32,bytes32[2],bytes,bytes)":{"details":"When `fail()` is called on Home, updater is slashed.","params":{"_newRoot":"Array containing two conflicting new roots","_oldRoot":"Old root shared between two conflicting updates","_signature":"Signature on `_oldRoot` and `_newRoot`[0]","_signature2":"Signature on `_oldRoot` and `_newRoot`[1]"}},"owner()":{"details":"Returns the address of the current owner."},"process(bytes)":{"details":"Recipient must implement a `handle` method (refer to IMessageRecipient.sol) Reverts if formatted message's destination domain is not the Replica's domain, if message has not been proven, or if not enough gas is provided for the dispatch transaction.","params":{"_message":"Formatted message"},"returns":{"_success":"TRUE iff dispatch transaction succeeded"}},"prove(bytes32,bytes32[32],uint256)":{"details":"Reverts if message's MessageStatus != None (i.e. if message was already proven or processed)For convenience, we allow proving against any previous root. This means that witnesses never need to be updated for the new root","params":{"_index":"Index of leaf in home's merkle tree","_leaf":"Leaf of message to prove","_proof":"Merkle proof of inclusion for leaf"},"returns":{"_0":"Returns true if proof was valid and `prove` call succeeded*"}},"proveAndProcess(bytes,bytes32[32],uint256)":{"details":"Reverts if `prove` call returns false","params":{"_index":"Index of leaf in home's merkle tree","_message":"Formatted message (refer to NomadBase.sol Message library)","_proof":"Merkle proof of inclusion for message's leaf"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setConfirmation(bytes32,uint256)":{"details":"To be used if in the case that fraud is proven and roots need to be deleted / added. Only callable by owner (Governance)","params":{"_confirmAt":"The new confirmation time. Set to 0 to \"delete\" a root.","_root":"The root for which to modify confirm time"}},"setOptimisticTimeout(uint256)":{"details":"Only callable by owner (Governance)","params":{"_optimisticSeconds":"New optimistic timeout period"}},"setUpdater(address)":{"details":"MUST ensure that all roots signed by previous Updater have been relayed before calling. Only callable by owner (Governance)","params":{"_updater":"New Updater"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"update(bytes32,bytes32,bytes)":{"details":"Reverts if update doesn't build off latest committedRoot or if signature is invalid.","params":{"_newRoot":"New merkle root","_oldRoot":"Old merkle root","_signature":"Updater's signature on `_oldRoot` and `_newRoot`"}}},"title":"Replica","version":1},"userdoc":{"events":{"DoubleUpdate(bytes32,bytes32[2],bytes,bytes)":{"notice":"Emitted when proof of a double update is submitted, which sets the contract to FAILED state"},"NewUpdater(address,address)":{"notice":"Emitted when Updater is rotated"},"Process(bytes32,bool,bytes)":{"notice":"Emitted when message is processed"},"SetConfirmation(bytes32,uint256,uint256)":{"notice":"Emitted when a root's confirmation is modified by governance"},"SetOptimisticTimeout(uint256)":{"notice":"Emitted when the value for optimisticTimeout is set"},"Update(uint32,bytes32,bytes32,bytes)":{"notice":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica"}},"kind":"user","methods":{"acceptableRoot(bytes32)":{"notice":"Check that the root has been submitted and that the optimistic timeout period has expired, meaning the root can be processed"},"doubleUpdate(bytes32,bytes32[2],bytes,bytes)":{"notice":"Called by external agent. Checks that signatures on two sets of roots are valid and that the new roots conflict with each other. If both cases hold true, the contract is failed and a `DoubleUpdate` event is emitted."},"homeDomainHash()":{"notice":"Hash of Home domain concatenated with \"NOMAD\""},"process(bytes)":{"notice":"Given formatted message, attempts to dispatch message payload to end recipient."},"prove(bytes32,bytes32[32],uint256)":{"notice":"Attempts to prove the validity of message given its leaf, the merkle proof of inclusion for the leaf, and the index of the leaf."},"proveAndProcess(bytes,bytes32[32],uint256)":{"notice":"First attempts to prove the validity of provided formatted `message`. If the message is successfully proven, then tries to process message."},"setConfirmation(bytes32,uint256)":{"notice":"Set confirmAt for a given root"},"setOptimisticTimeout(uint256)":{"notice":"Set optimistic timeout period for new roots"},"setUpdater(address)":{"notice":"Set Updater role"},"update(bytes32,bytes32,bytes)":{"notice":"Called by external agent. Submits the signed update's new root, marks root's allowable confirmation time, and emits an `Update` event."}},"notice":"Track root updates on Home, prove and dispatch messages to end recipients.","version":1}},"settings":{"compilationTarget":{"vault/nomad/Replica.sol":"Replica"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":10000},"remappings":[]},"sources":{"vault/lib/MerkleLib.sol":{"keccak256":"0xf297da90e669fa6030407ff7218c2e78a109de7c8cd04c0d82d40d1a61a41999","license":"MIT OR Apache-2.0","urls":["bzz-raw://d272de5946822a21c77ef98b835f157424f19348c1938594019f14a3e1140f78","dweb:/ipfs/Qmac25few1VuzwzCBBwX6BoTbcXwoWNBv6Pa26EDjvb5hQ"]},"vault/lib/Message.sol":{"keccak256":"0xe0704a188b84a82fdee9bc0d2ed139649bda554e787cd8482041e262828b0b98","license":"MIT OR Apache-2.0","urls":["bzz-raw://f65535f8dd0f3707249f69befd4c74ef74b7688b578fcabf10e0817bbab409c0","dweb:/ipfs/QmeDpTVVJ4QYnhvTdJfEoXRksACw4tK6xxnZZScciEMmm7"]},"vault/lib/TypeCasts.sol":{"keccak256":"0xa572a0757d1408e12330f02797596e6d2315580e872cd4acd681c3ab09555b71","license":"MIT OR Apache-2.0","urls":["bzz-raw://cd9d68a1d7884e6a1f45c392e284aab3ba1e73ff2e6f0bd0fbd023b801c0fc45","dweb:/ipfs/QmVp63N9yUp7dUpnALCYpabZKtdD3ZbXGaBMsL2sn8NeB6"]},"vault/lib/TypedMemView.sol":{"keccak256":"0xaaa1d49d3ca939e49b369adcf5bf028d0d259821af57d4fa4229177eb8932936","license":"MIT OR Apache-2.0","urls":["bzz-raw://10691d24a257dc2e79cd779812c52571474239c9b1989fc63a803d5936b14fec","dweb:/ipfs/QmVERCmFdsEeuVpS2BxvJUttRaaDf6W7FjQJRFX2qnBU98"]},"vault/nomad/NomadBase.sol":{"keccak256":"0x2cb0c4eb4c499a947ed221dc7de88e0922be6509b1132b46431b0ffe0c8e2aaf","license":"MIT OR Apache-2.0","urls":["bzz-raw://7684740e712522aa97028a8c373d30ce225a756a64cdfaefb919bd1fe05999e6","dweb:/ipfs/Qmcf9QvJo9QbGkAS92DnaXemUX9XkXdEWjmkd9gQjogFoo"]},"vault/nomad/Replica.sol":{"keccak256":"0xef03d37a5cacf8476599f9269bd5b5e26bc094d8cf4c75d4a7bcd3d0d15a2fd5","license":"MIT OR Apache-2.0","urls":["bzz-raw://e8d26fc806d6f024856b46928f1f0725f606ffd30bbfd669f0a3b4b31c594290","dweb:/ipfs/QmbR5Zz8oorfRvCtRvhAFMN1w3JQWy4Bc4zZj9FCnNcRhC"]},"vault/nomad/Version0.sol":{"keccak256":"0xc102ed18474a58833454fd37fc46473c88235b66cc7997aa71cad52e15314eb7","license":"MIT OR Apache-2.0","urls":["bzz-raw://4ea2a31a323f350e0976f8401602ec83fd2376d74c01e04b57d3c87ea223d269","dweb:/ipfs/QmQ7q9LZooNmRKKsVohNiLvFCkP1P78AuDs94UbbiEFaon"]},"vault/vendor/v0.8/AddressUpgradeable.sol":{"keccak256":"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d","license":"MIT","urls":["bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f","dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"]},"vault/vendor/v0.8/ContextUpgradeable.sol":{"keccak256":"0x741fb9edb83675bd6b0dd0aa5a267d06b54cc1b93e91ae85deadfd7f7388c9fa","license":"MIT","urls":["bzz-raw://87c2beebb42f26c7b2cf81ba77909b1f441428b4ce9b6af2a9b5d967c3725283","dweb:/ipfs/QmaFtVEJusZXw9Z1XfwxHgfVW9xMFcihHRCqxZYQS9QSTe"]},"vault/vendor/v0.8/ECDSA.sol":{"keccak256":"0x46a0a615f0e2c10c54266e72fcb5c6e726f7e94100f0e79d6ed967ffb0c6c74f","license":"MIT","urls":["bzz-raw://9defa5a8c1b084c25615b2d2a627fc14bbe6bfdb7552ce437a6de7c3ebf6c55d","dweb:/ipfs/QmWgYRyBB5jZahVXgkU7dv4rB2DZqjXYMLNWSk5UVuhXX4"]},"vault/vendor/v0.8/Initializable2.sol":{"keccak256":"0xec89b5103f4587ed7c2a8ac74c161d290b9b3117c259df962f7f86cc7e6fb017","license":"MIT","urls":["bzz-raw://a22fa5a2787ba96c5fc4d92e38e6bc1ab0f8197f96ed723264f10b66e4ea60fb","dweb:/ipfs/QmTarMFTBCvmwvn1PPA8DLBARngs9WNSdDDeASV9nPb4r4"]},"vault/vendor/v0.8/OwnableUpgradeable.sol":{"keccak256":"0x7206c9d97f58333bbc92bc81ecce6a9fa06e4df4f6cb6b21dd03356d9a80c366","license":"MIT","urls":["bzz-raw://241805ddf7e86be41a2ed1689f52c4afc6c444417233d94022ff733ad1f052fc","dweb:/ipfs/QmVJ35dZjUhtihZkNS4Jd5pM2YpsZGwber2DfV7ZJ5Xeab"]},"vault/vendor/v0.8/Strings.sol":{"keccak256":"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d","license":"MIT","urls":["bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e","dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7"]}},"version":1}