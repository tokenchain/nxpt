{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"AssetLogic__transferAssetFromContract_notNative","type":"error"},{"inputs":[],"name":"Connext__addAssetId_alreadyAdded","type":"error"},{"inputs":[],"name":"Connext__addLiquidityForRouter_amountIsZero","type":"error"},{"inputs":[],"name":"Connext__addLiquidityForRouter_badAsset","type":"error"},{"inputs":[],"name":"Connext__addLiquidityForRouter_badRouter","type":"error"},{"inputs":[],"name":"Connext__addLiquidityForRouter_routerEmpty","type":"error"},{"inputs":[],"name":"Connext__addRelayerFees_notValue","type":"error"},{"inputs":[],"name":"Connext__addRelayer_alreadyApproved","type":"error"},{"inputs":[],"name":"Connext__decrementLiquidity_maxRoutersExceeded","type":"error"},{"inputs":[],"name":"Connext__decrementLiquidity_notEmpty","type":"error"},{"inputs":[],"name":"Connext__execute_notSlowParams","type":"error"},{"inputs":[],"name":"Connext__handleRelayerFees_notApprovedRelayer","type":"error"},{"inputs":[],"name":"Connext__handleRelayerFees_notRtrSig","type":"error"},{"inputs":[],"name":"Connext__onlyBridgeRouter_notBridge","type":"error"},{"inputs":[],"name":"Connext__removeAssetId_notAdded","type":"error"},{"inputs":[],"name":"Connext__removeLiquidity_amountIsZero","type":"error"},{"inputs":[],"name":"Connext__removeLiquidity_insufficientFunds","type":"error"},{"inputs":[],"name":"Connext__removeLiquidity_recipientEmpty","type":"error"},{"inputs":[],"name":"Connext__removeRelayer_notApproved","type":"error"},{"inputs":[],"name":"Connext__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer","type":"error"},{"inputs":[],"name":"Connext__xcall_notSupportedAsset","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__acceptProposedOwner_delayNotElapsed","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__acceptProposedOwner_noOwnershipChange","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__onlyOwner_notOwner","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__onlyProposed_notProposedOwner","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__proposeAssetOwnershipRenunciation_noOwnershipChange","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__proposeNewOwner_invalidProposal","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__proposeNewOwner_noOwnershipChange","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__proposeRouterOwnershipRenunciation_noOwnershipChange","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceAssetOwnership_delayNotElapsed","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceAssetOwnership_noOwnershipChange","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceAssetOwnership_noProposal","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceOwnership_delayNotElapsed","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceOwnership_invalidProposal","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceOwnership_noProposal","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceRouterOwnership_delayNotElapsed","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceRouterOwnership_noOwnershipChange","type":"error"},{"inputs":[],"name":"ProposedOwnableUpgradeable__renounceRouterOwnership_noProposal","type":"error"},{"inputs":[],"name":"RouterPermissionsManagerLogic__setupRouter_amountIsZero","type":"error"},{"inputs":[],"name":"RouterPermissionsManagerLogic__setupRouter_routerEmpty","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"canonicalId","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":false,"internalType":"address","name":"adoptedAsset","type":"address"},{"indexed":false,"internalType":"address","name":"supportedAsset","type":"address"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"AssetAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"renounced","type":"bool"}],"name":"AssetOwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"AssetOwnershipRenunciationProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"canonicalId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"AssetRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transferId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"address","name":"router","type":"address"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint32","name":"originDomain","type":"uint32"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"}],"indexed":false,"internalType":"struct IConnext.CallParams","name":"params","type":"tuple"},{"indexed":false,"internalType":"address","name":"localAsset","type":"address"},{"indexed":false,"internalType":"address","name":"transactingAsset","type":"address"},{"indexed":false,"internalType":"uint256","name":"localAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"transactingAmount","type":"uint256"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"Executed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"router","type":"address"},{"indexed":false,"internalType":"address","name":"local","type":"address"},{"indexed":false,"internalType":"bytes32","name":"canonicalId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"router","type":"address"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"local","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"maxRoutersPerTransfer","type":"uint256"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"MaxRoutersPerTransferUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"proposedOwner","type":"address"}],"name":"OwnershipProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transferId","type":"bytes32"},{"indexed":true,"internalType":"uint32","name":"origin","type":"uint32"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"localAsset","type":"address"},{"indexed":false,"internalType":"uint256","name":"localAmount","type":"uint256"},{"components":[{"internalType":"address[]","name":"routers","type":"address[]"},{"internalType":"uint256","name":"amount","type":"uint256"}],"indexed":false,"internalType":"struct IConnext.ExecutedTransfer","name":"executed","type":"tuple"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"Reconciled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RelayerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RelayerRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"renounced","type":"bool"}],"name":"RouterOwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"RouterOwnershipRenunciationProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"canonicalId","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":false,"internalType":"address","name":"swapPool","type":"address"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"StableSwapAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transferId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint32","name":"originDomain","type":"uint32"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"}],"indexed":false,"internalType":"struct IConnext.CallParams","name":"params","type":"tuple"},{"indexed":false,"internalType":"address","name":"transactingAsset","type":"address"},{"indexed":false,"internalType":"address","name":"localAsset","type":"address"},{"indexed":false,"internalType":"uint256","name":"transactingAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"localAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"XCalled","type":"event"},{"inputs":[],"name":"acceptProposedOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"acceptProposedRouterOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"local","type":"address"}],"name":"addLiquidity","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"local","type":"address"},{"internalType":"address","name":"router","type":"address"}],"name":"addLiquidityFor","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"relayer","type":"address"}],"name":"addRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"addRelayerFees","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"bytes32","name":"id","type":"bytes32"}],"internalType":"struct BridgeMessage.TokenId","name":"canonical","type":"tuple"},{"internalType":"address","name":"stableSwapPool","type":"address"}],"name":"addStableSwapPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"adoptedToCanonical","outputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"adoptedToLocalPools","outputs":[{"internalType":"contract IStableSwap","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"approvedAssets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"approvedRelayers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"}],"name":"approvedRouters","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"assetOwnershipTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bridgeRouter","outputs":[{"internalType":"contract BridgeRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"canonicalToAdopted","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"delay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"domain","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint32","name":"originDomain","type":"uint32"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"}],"internalType":"struct IConnext.CallParams","name":"params","type":"tuple"},{"internalType":"address","name":"local","type":"address"},{"internalType":"address[]","name":"routers","type":"address[]"},{"internalType":"uint32","name":"feePercentage","type":"uint32"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"relayerSignature","type":"bytes"},{"internalType":"address","name":"originSender","type":"address"}],"internalType":"struct IConnext.ExecuteArgs","name":"_args","type":"tuple"}],"name":"execute","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"executor","outputs":[{"internalType":"contract IExecutor","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_domain","type":"uint256"},{"internalType":"address payable","name":"_bridgeRouter","type":"address"},{"internalType":"address","name":"_tokenRegistry","type":"address"},{"internalType":"address","name":"_wrappedNative","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isAssetOwnershipRenounced","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isRouterOwnershipRenounced","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxRoutersPerTransfer","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proposeAssetOwnershipRenunciation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newlyProposed","type":"address"}],"name":"proposeNewOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"proposed","type":"address"}],"name":"proposeRouterOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proposeRouterOwnershipRenunciation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proposed","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"proposedRouterOwners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"proposedRouterTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proposedTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_transferId","type":"bytes32"},{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"address","name":"_local","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"reconcile","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"reconciledTransfers","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"canonicalId","type":"bytes32"},{"internalType":"address","name":"adoptedAssetId","type":"address"}],"name":"removeAssetId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"local","type":"address"},{"internalType":"address payable","name":"to","type":"address"}],"name":"removeLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"relayer","type":"address"}],"name":"removeRelayer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"to","type":"address"}],"name":"removeRelayerFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"removeRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceAssetOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceRouterOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounced","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"routedTransfers","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"routedTransfersGas","outputs":[{"internalType":"uint256","name":"gasUsed","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"routerBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"routerOwners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"routerOwnershipTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"routerRecipients","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"routerRelayerFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"newMaxRouters","type":"uint256"}],"name":"setMaxRoutersPerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"setRouterRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"bytes32","name":"id","type":"bytes32"}],"internalType":"struct BridgeMessage.TokenId","name":"canonical","type":"tuple"},{"internalType":"address","name":"adoptedAssetId","type":"address"},{"internalType":"address","name":"stableSwapPool","type":"address"}],"name":"setupAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"setupRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenRegistry","outputs":[{"internalType":"contract TokenRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wrapper","outputs":[{"internalType":"contract IWrapped","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint32","name":"originDomain","type":"uint32"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"}],"internalType":"struct IConnext.CallParams","name":"params","type":"tuple"},{"internalType":"address","name":"transactingAssetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IConnext.XCallArgs","name":"_args","type":"tuple"}],"name":"xcall","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"acceptProposedRouterOwner(address)":{"params":{"router":"Router address to set recipient"}},"addLiquidity(uint256,address)":{"details":"The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.","params":{"amount":"- The amount of liquidity to add for the router","local":"- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset"}},"addLiquidityFor(uint256,address,address)":{"details":"The liquidity will be held in the local asset, which is the representation if you are *not* on the canonical domain, and the canonical asset otherwise.","params":{"amount":"- The amount of liquidity to add for the router","local":"- The address of the asset you're adding liquidity for. If adding liquidity of the native asset, routers may use `address(0)` or the wrapped asset","router":"The router you are adding liquidity on behalf of"}},"addRelayer(address)":{"params":{"relayer":"- The relayer address to add"}},"addRelayerFees(address)":{"params":{"router":"- The router to credit"}},"execute(((address,bytes,uint32,uint32),address,address[],uint32,uint256,uint256,bytes,address))":{"details":"Will store the `ExecutedTransfer` if fast liquidity is provided, or assert the hash of the `ReconciledTransfer` when using bridge liquidity","params":{"_args":"- The `ExecuteArgs` for the transfer"},"returns":{"_0":"bytes32 The transfer id of the crosschain transfer"}},"proposeRouterOwner(address,address)":{"params":{"proposed":"Proposed owner Address to set to router","router":"Router address to set recipient"}},"reconcile(bytes32,uint32,address,address,uint256)":{"details":"If fast liquidity was provided, the `amount` and `externalHash` are asserted against the `ExecutedTransaction` struct stored onchain. If no fast liqudity was provided, the hash of the `ReconciledTransaction` is stored onchain to enforce correctness when `execute` is called","params":{"_amount":"- The amount bridged","_local":"- The address of the asset delivered by the bridge","_origin":"- The origin domain of the transfer","_recipient":"- The address that will receive funds on the destination domain","_transferId":"- Transfer UUID"}},"removeAssetId(bytes32,address)":{"params":{"adoptedAssetId":"- Corresponding adopted asset to remove","canonicalId":"- Token id to remove"}},"removeLiquidity(uint256,address,address)":{"params":{"amount":"- The amount of liquidity to remove for the router","local":"- The address of the asset you're removing liquidity from. If removing liquidity of the native asset, routers may use `address(0)` or the wrapped asset","to":"The address that will receive the liquidity being removed"}},"removeRelayer(address)":{"params":{"relayer":"- The relayer address to remove"}},"removeRelayerFees(uint256,address)":{"details":"Must be called by the router you are decrementing relayer fees for","params":{"amount":"- The amount of relayer fee to remove","to":"- Who to send funds to"}},"removeRouter(address)":{"params":{"router":"Router address to remove"}},"setMaxRoutersPerTransfer(uint256)":{"params":{"newMaxRouters":"The new max amount of routers"}},"setRouterRecipient(address,address)":{"details":"Router should only be able to set this once otherwise if router key compromised, no problem is solved since attacker could just update recipient","params":{"recipient":"Recipient Address to set to router","router":"Router address to set recipient"}},"setupAsset((uint32,bytes32),address,address)":{"details":"When whitelisting the canonical asset, all representational assets would be whitelisted as well. In the event you have a different adopted asset (i.e. PoS USDC on polygon), you should *not* whitelist the adopted asset. The stable swap pool address used should allow you to swap between the local <> adopted asset","params":{"adoptedAssetId":"- The used asset id for this domain (i.e. PoS USDC for polygon)","canonical":"- The canonical asset to add by id and domain. All representations will be whitelisted as well","stableSwapPool":"- Address of the pool to swap adopted <> local asset"}},"setupRouter(address,address,address)":{"params":{"owner":"Initial Owner of router","recipient":"Initial Recipient of router","router":"Router address to setup"}},"xcall(((address,bytes,uint32,uint32),address,uint256))":{"details":"This contract must have approval to transfer the adopted assets. They are then swapped to the local nomad assets via the configured AMM and sent over the bridge router.","params":{"_args":"- The XCallArgs"},"returns":{"_0":"The transfer id of the crosschain transfer"}}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"adoptedToCanonical":{"details":"If the adopted asset is the native asset, the keyed address will be the wrapped asset address"},"adoptedToLocalPools":{"details":"Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)"},"approvedAssets":{"details":"Mapping is keyed on the canonical token identifier matching what is stored in the token registry"},"approvedRelayers":{"details":"Send relayer fee if msg.sender is approvedRelayer. otherwise revert()"},"canonicalToAdopted":{"details":"If the adopted asset is the native asset, the stored address will be the wrapped asset address"},"domain":{"details":"Must match the nomad domain, which is distinct from the \"chainId\""},"nonce":{"details":"Assigned at first interaction (xcall on origin domain);"},"reconciledTransfers":{"details":"This information is stored onchain if the transaction has not been fulfilled at the time of reconcile"},"routedTransfers":{"details":"This information is stored onchain if fast liquidity is provided"},"routedTransfersGas":{"details":"This informaion is stored onchain if fast liquidity is provided"},"routerBalances":{"details":"Routers should always store liquidity that they can expect to receive via the bridge on this domain (the nomad local asset)"},"routerRelayerFees":{"details":"Right now, routers only store native asset onchain. TODO: allow for approved relaying assets"},"wrapper":{"details":"Needed because the nomad only handles ERC20 assets"}},"version":1},"userdoc":{"events":{"AssetAdded(bytes32,uint32,address,address,address)":{"notice":"Emitted when a new asset is added"},"AssetRemoved(bytes32,address)":{"notice":"Emitted when an asset is removed from whitelists"},"Executed(bytes32,address,address,(address,bytes,uint32,uint32),address,address,uint256,uint256,address)":{"notice":"Emitted when `execute` is called on the destination chain"},"LiquidityAdded(address,address,bytes32,uint256,address)":{"notice":"Emitted when a router adds liquidity to the contract"},"LiquidityRemoved(address,address,address,uint256,address)":{"notice":"Emitted when a router withdraws liquidity from the contract"},"MaxRoutersPerTransferUpdated(uint256,address)":{"notice":"Emitted when the maxRoutersPerTransfer variable is updated"},"Reconciled(bytes32,uint32,address,address,uint256,(address[],uint256),address)":{"notice":"Emitted when `reconciled` is called by the bridge on the destination domain"},"RelayerAdded(address,address)":{"notice":"Emitted when a rlayer is added or removed from whitelists"},"RelayerRemoved(address,address)":{"notice":"Emitted when a rlayer is added or removed from whitelists"},"StableSwapAdded(bytes32,uint32,address,address)":{"notice":"Emitted when a new stable-swap AMM is added for the local <> adopted token"},"XCalled(bytes32,address,(address,bytes,uint32,uint32),address,address,uint256,uint256,uint256,address)":{"notice":"Emitted when `xcall` is called on the origin domain"}},"kind":"user","methods":{"acceptProposedOwner()":{"notice":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"acceptProposedRouterOwner(address)":{"notice":"New router owner must accept role, or previous if proposed is 0x0"},"addLiquidity(uint256,address)":{"notice":"This is used by any router to increase their available liquidity for a given asset."},"addLiquidityFor(uint256,address,address)":{"notice":"This is used by anyone to increase a router's available liquidity for a given asset."},"addRelayer(address)":{"notice":"Used to add approved relayer"},"addRelayerFees(address)":{"notice":"Used to add relayer fees in the native asset"},"addStableSwapPool((uint32,bytes32),address)":{"notice":"Adds a stable swap pool for the local <> adopted asset."},"adoptedToCanonical(address)":{"notice":"Mapping of canonical to adopted assets on this domain"},"adoptedToLocalPools(bytes32)":{"notice":"Mapping holding the AMMs for swapping in and out of local assets"},"approvedAssets(bytes32)":{"notice":"Mapping of whitelisted assets on same domain as contract"},"approvedRelayers(address)":{"notice":"Mapping of approved relayers"},"assetOwnershipTimestamp()":{"notice":"Returns the timestamp when asset ownership was last proposed to be renounced"},"bridgeRouter()":{"notice":"The local nomad bridge router"},"canonicalToAdopted(bytes32)":{"notice":"Mapping of adopted to canonical on this domain"},"delay()":{"notice":"Returns the delay period before a new owner can be accepted."},"domain()":{"notice":"The domain this contract exists on"},"execute(((address,bytes,uint32,uint32),address,address[],uint32,uint256,uint256,bytes,address))":{"notice":"This function is called on the destination chain when the bridged asset should be swapped into the adopted asset and the external call executed. Can be used before reconcile (when providing fast liquidity) or after reconcile (when using liquidity from the bridge)"},"executor()":{"notice":"The external contract that will execute crosschain calldata"},"isAssetOwnershipRenounced()":{"notice":"Indicates if the ownership of the asset whitelist has been renounced"},"isRouterOwnershipRenounced()":{"notice":"Indicates if the ownership of the router whitelist has been renounced"},"maxRoutersPerTransfer()":{"notice":"The max amount of routers a payment can be routed through"},"nonce()":{"notice":"Nonce for the contract, used to keep unique transfer ids."},"owner()":{"notice":"Returns the address of the current owner."},"proposeAssetOwnershipRenunciation()":{"notice":"Indicates if the ownership of the asset whitelist has been renounced"},"proposeNewOwner(address)":{"notice":"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"},"proposeRouterOwner(address,address)":{"notice":"Current owner or router may propose a new router owner"},"proposeRouterOwnershipRenunciation()":{"notice":"Indicates if the ownership of the router whitelist has been renounced"},"proposed()":{"notice":"Returns the address of the proposed owner."},"proposedTimestamp()":{"notice":"Returns the address of the proposed owner."},"reconcile(bytes32,uint32,address,address,uint256)":{"notice":"This function is called by the bridge router to pass through the information provided by the user on prepare."},"reconciledTransfers(bytes32)":{"notice":"Stores hash of the `ReconciledTransaction` (all information passed through bridge) on `reconcile`"},"removeAssetId(bytes32,address)":{"notice":"Used to remove assets from the whitelist"},"removeLiquidity(uint256,address,address)":{"notice":"This is used by any router to decrease their available liquidity for a given asset."},"removeRelayer(address)":{"notice":"Used to remove approved relayer"},"removeRelayerFees(uint256,address)":{"notice":"Used to remove relayer fee in the native asset"},"removeRouter(address)":{"notice":"Used to remove routers that can transact crosschain"},"renounceAssetOwnership()":{"notice":"Indicates if the ownership of the asset whitelist has been renounced"},"renounceOwnership()":{"notice":"Renounces ownership of the contract after a delay"},"renounceRouterOwnership()":{"notice":"Indicates if the ownership of the asset whitelist has been renounced"},"renounced()":{"notice":"Indicates if the ownership has been renounced() by checking if current owner is address(0)"},"routedTransfers(bytes32)":{"notice":"Stores the transferId => ExecutedTransfer mapping"},"routedTransfersGas(bytes32)":{"notice":"Stores the transferId => GasInfo mapping to track gas used on `execute`"},"routerBalances(address,address)":{"notice":"Mapping of router to available balance of an asset"},"routerOwnershipTimestamp()":{"notice":"Returns the timestamp when router ownership was last proposed to be renounced"},"routerRelayerFees(address)":{"notice":"Mapping of router to available relayer fee"},"setMaxRoutersPerTransfer(uint256)":{"notice":"Used to set the max amount of routers a payment can be routed through"},"setRouterRecipient(address,address)":{"notice":"Sets the designated recipient for a router"},"setupAsset((uint32,bytes32),address,address)":{"notice":"Used to add supported assets. This is an admin only function"},"setupRouter(address,address,address)":{"notice":"Used to set router initial properties"},"tokenRegistry()":{"notice":"The local nomad token registry"},"wrapper()":{"notice":"The address of the wrapper for the native asset on this domain"},"xcall(((address,bytes,uint32,uint32),address,uint256))":{"notice":"This function is called by a user who is looking to bridge funds"}},"version":1}},"settings":{"compilationTarget":{"vault/connext/Connext.sol":"Connext"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":10000},"remappings":[]},"sources":{"vault/connext/Connext.sol":{"keccak256":"0xf4d622e46a0150f138d561c4bb6127c1aadb37b39bf940304225341864bd021a","license":"UNLICENSED","urls":["bzz-raw://8cb748bfd4b6c8254334db1e230a7603695ca15245ead7650039b31fc5260ebe","dweb:/ipfs/Qmb8bGXdBTr817PQc2ZYKt2VQQWjKpnZ9vA7gyZtViF6xy"]},"vault/connext/ProposedOwnableUpgradeable.sol":{"keccak256":"0x16cb2af55e9df4cc698b1a4d6753d504a672a29e60a5d2f8854ca54f364c9f4b","license":"UNLICENSED","urls":["bzz-raw://402af72bad9c36c02685fec1dbd6308185f3f1c7d9861e2cc9e271931c050b65","dweb:/ipfs/QmT6dAZcYrZfhLdcGpW8VgxCaLr96R4d7iJGwE4W223aHC"]},"vault/connext/RouterPermissionsManager.sol":{"keccak256":"0xac900f0fafa71196a42320c7adbc1ed8231b4949447ddd678ef99f8d475b6e9e","license":"UNLICENSED","urls":["bzz-raw://dc49b79494645269a88b3caefb1e1ec4d105ca9e5678f7462f819d37a9194e5c","dweb:/ipfs/Qmexj5qQ9AVvoa2epyjvqYyzV6HD3DkzTfrFSxcqci97vC"]},"vault/connext/RouterPermissionsManagerLogic.sol":{"keccak256":"0x50ec5d8cd07ecc8b42b2546b85bbde2bb11c61981e1dda5a8b9fe852a31f2e0e","license":"UNLICENSED","urls":["bzz-raw://ee7a674225a31e14620b586725fa7a5b52ddcd083994ee1f7e45c5ef18c441ff","dweb:/ipfs/Qme2PpPzvCwmFqDDgZC4ysS6P617NagK8tPt71kFoFTRh4"]},"vault/interfaces/IBridgeToken.sol":{"keccak256":"0xc9e5b86c5ed51f25d5443906e81488e4da7ac56a0f908bc605665e139f902be9","license":"MIT OR Apache-2.0","urls":["bzz-raw://54be53be934f5ab2876f87b9dde241a251251cbc4789a1309d43332edb9fe3ef","dweb:/ipfs/QmUKydSHBUCvp8vg5Xc2MJuVeUiVdbHF1qWjD3gAx2w4gs"]},"vault/interfaces/IConnext.sol":{"keccak256":"0x7ad0814c531330080539bb0600462abf49af681bda0fc1c9a60ed8ca0a2fb757","license":"UNLICENSED","urls":["bzz-raw://25e0b70973d900fe2917a8732136d5b33c666c80b25d259ed1b1ba2b341243ed","dweb:/ipfs/QmPxcjdHLUQmKftVf78PFHuxearqmBu8au2k8JCf5tc4p5"]},"vault/interfaces/IExecutor.sol":{"keccak256":"0xd3a3226f2f374a926ada70085a43f01e4c322e12f9568e82092ec0e5dbbd959f","license":"UNLICENSED","urls":["bzz-raw://4064200011d864e1767f14ad1bd0eef75c29b0451a09c82bf39ccadc355eefdb","dweb:/ipfs/QmebDzUY8rDMoKbL94LX8McLVUhEj3vfy2W1MSrkzgiLQB"]},"vault/interfaces/IMessageRecipient.sol":{"keccak256":"0x0c9dfa692a7f103f2dadf01d6939f9946dfd14915bfbb830525da3fc94db5f0b","license":"MIT OR Apache-2.0","urls":["bzz-raw://93082301cfc65757e1306e2480c62cae9baff763239308632f983565b6f7298f","dweb:/ipfs/QmRtpuY3Rn4euT2wKVKdy8ZBWRNGVeNAijpMFKN2DX8ksQ"]},"vault/interfaces/IStableSwap.sol":{"keccak256":"0x89dd55bfd77762a5bba21a12ce2d6cef06fb4a3bb7dfd4ee2a7d800f9b9d9e3e","license":"UNLICENSED","urls":["bzz-raw://08200caa07c80cc586b392d6dfccd90794fecf5b6bdee615680d38dc7447fcd9","dweb:/ipfs/QmUwbdzBDTVeMjVwCyDJM88p65EQ5U2keNWzrYJCaKkBdb"]},"vault/interfaces/ITokenRegistry.sol":{"keccak256":"0xd51a3c2a9d61a0eb2ba83e5c4fd9f32e529c3898f0b15937d137a07028477ee1","license":"MIT OR Apache-2.0","urls":["bzz-raw://cf6d9b21396326ef2d97f196ab16c81b4dff97ee8ba1b1c01521aebfed952a75","dweb:/ipfs/QmYAfC1gZnyZq225SBTxNpWy8iceWNssgXxoRJp1jcTDoJ"]},"vault/interfaces/IUpdaterManager.sol":{"keccak256":"0xd100254c1e066473d303174ec14615f12122bce35bddc794c0e49d6df95ca0bc","license":"MIT OR Apache-2.0","urls":["bzz-raw://c337cc155f20c4fb126627c503e8ed7f31bf7b0e217d75d9648ca2c254325171","dweb:/ipfs/Qma4RgyFwpJN2GkR7gmJWHS9Sp9m2NwtCtSMsDnMqMQAJS"]},"vault/interfaces/IWrapped.sol":{"keccak256":"0xc9ca965f684599be9506f29ed819322f0cdeb53222746b472af8a753620a68a1","license":"UNLICENSED","urls":["bzz-raw://9190dae8260c4656fe7b870adaca9b7a1df63851858b775b9838c4a977893c8f","dweb:/ipfs/Qmb8ashLfatP6RR12WVKfZp5pBmz2a9VUeMcFzsW3hqYKo"]},"vault/interpreters/Executor.sol":{"keccak256":"0xc6e922016311e3ec6ee8b8b6521bc61bdb955a084e9da307f95e4fdc71e925be","license":"UNLICENSED","urls":["bzz-raw://7854fee8139d43ebb303a1949411dce530e8b2ee51bfdefa46bf94747eda7c4d","dweb:/ipfs/QmbZCoJfhcRcbiX2p4j1ygi9SA7DBxcnHKYgeZGzeeRzaq"]},"vault/lib/AssetLogic.sol":{"keccak256":"0x2b37f86181fa9a21ab0cc2ca1f831ffc458546566cf89ac60df2b6b90cd82ae9","license":"UNLICENSED","urls":["bzz-raw://ebb59153288d58ea9ec7f2004f393fc94143b2ebdc556aac5529f6634f3b1ce9","dweb:/ipfs/QmRs5zxjjsBVRVZMNLexwg9YFZ1HPTiTJpR2JLoGSkkgjB"]},"vault/lib/ConnextUtils.sol":{"keccak256":"0x8e0254ef1453df8ca35eb58f6ccbe5d5f0f1d7a449a157a3f609615646cb369b","license":"UNLICENSED","urls":["bzz-raw://205527adf92b35776b845c8fc967b7864ba5fa0a94f8286ee4e4d6bd720a9803","dweb:/ipfs/Qmf3KmaLCoabfdStsbjn1HKwCYaNLDy3AHGUuUAUmVc8W5"]},"vault/lib/LibCrossDomainProperty.sol":{"keccak256":"0x41befd62e204cf8ba36be4bba7c37407d0dd5ff5776c46cff26edd34ef74acfd","license":"UNLICENSED","urls":["bzz-raw://80dc1261dc63f96fabc06e6d88e1fc9c92f653754e885b2ecbdc8b571ec2d4ed","dweb:/ipfs/QmSautXuJUqqGEa2ETgDtKTxxbvuP6fnZ1PYcGEx2YrBhi"]},"vault/lib/MerkleLib.sol":{"keccak256":"0xf297da90e669fa6030407ff7218c2e78a109de7c8cd04c0d82d40d1a61a41999","license":"MIT OR Apache-2.0","urls":["bzz-raw://d272de5946822a21c77ef98b835f157424f19348c1938594019f14a3e1140f78","dweb:/ipfs/Qmac25few1VuzwzCBBwX6BoTbcXwoWNBv6Pa26EDjvb5hQ"]},"vault/lib/Message.sol":{"keccak256":"0xe0704a188b84a82fdee9bc0d2ed139649bda554e787cd8482041e262828b0b98","license":"MIT OR Apache-2.0","urls":["bzz-raw://f65535f8dd0f3707249f69befd4c74ef74b7688b578fcabf10e0817bbab409c0","dweb:/ipfs/QmeDpTVVJ4QYnhvTdJfEoXRksACw4tK6xxnZZScciEMmm7"]},"vault/lib/QueueLib.sol":{"keccak256":"0x44f62140867993d5339d1abc00b852a3e38adde65e2f9bda741ab7f3e0f178d3","license":"MIT OR Apache-2.0","urls":["bzz-raw://b5214a9d0bb39939f3d971cdc5e0f344d22884911bd4b3be0bc1945402192db3","dweb:/ipfs/QmZPrrGK4Z5mHdGC3uRMqvYtCnR94XnyudtkzseSE44ChT"]},"vault/lib/TypeCasts.sol":{"keccak256":"0xa572a0757d1408e12330f02797596e6d2315580e872cd4acd681c3ab09555b71","license":"MIT OR Apache-2.0","urls":["bzz-raw://cd9d68a1d7884e6a1f45c392e284aab3ba1e73ff2e6f0bd0fbd023b801c0fc45","dweb:/ipfs/QmVp63N9yUp7dUpnALCYpabZKtdD3ZbXGaBMsL2sn8NeB6"]},"vault/lib/TypedMemView.sol":{"keccak256":"0xaaa1d49d3ca939e49b369adcf5bf028d0d259821af57d4fa4229177eb8932936","license":"MIT OR Apache-2.0","urls":["bzz-raw://10691d24a257dc2e79cd779812c52571474239c9b1989fc63a803d5936b14fec","dweb:/ipfs/QmVERCmFdsEeuVpS2BxvJUttRaaDf6W7FjQJRFX2qnBU98"]},"vault/nomad/BridgeMessage.sol":{"keccak256":"0x0bb5242debd7af9b80f00c48224d4d237e0a6abcdd0d7f59bbca9a0cd21fdf05","license":"MIT OR Apache-2.0","urls":["bzz-raw://d4749bbce9cdf7b84b0c1eaa447e27d3aef4e6a29afd548d8c9698f26e9c082b","dweb:/ipfs/QmYwMT3kEqvF4fVg3eVdHJ9R9HwxAigX3VuPqQjiRFCzGi"]},"vault/nomad/BridgeRouter.sol":{"keccak256":"0x02bc65a79cab021a5ba4eed0ca24fd4bd29d65cef0acb7f135dcb81c54c87d5b","license":"MIT OR Apache-2.0","urls":["bzz-raw://c4b4542be97913b245bbc3cdbfd92c0084989fd16e39e8727094d7a8022ad9a5","dweb:/ipfs/QmWkmqMHjZ9BM3RSricjXZAppMRmUVyECUncbHdXLVfeax"]},"vault/nomad/Encoding.sol":{"keccak256":"0xdc5d87e14e3a6340f09000820e1482a1ee994426ae6a54a3601ef7af6758b5c2","license":"MIT OR Apache-2.0","urls":["bzz-raw://40e0956e66b1b2d37f653dd077ad5c3758fef5b23f339f88fd4e0a151ec5fa94","dweb:/ipfs/QmWXzTsm1K23PhGi5a5vreVXE8sU4iiFNnztFYZCDCMstm"]},"vault/nomad/Home.sol":{"keccak256":"0xc9ef0ddbaadbb7546f6647a252aa230189fb37f4641aa6f0b065b603217297f7","license":"MIT OR Apache-2.0","urls":["bzz-raw://bf53197afe80c2cc2212d604a36f2d781f08652b141c9158cc43a0276a3a50b9","dweb:/ipfs/QmeEjJWY4JbmEwQ5zQVTj3secVLna14LF2BC63vptc5eaS"]},"vault/nomad/Merkle.sol":{"keccak256":"0x20a2c4d61c3b0c205e6eb1b047e037f7a37bebb75a5dc72a727969eb8ad7e586","license":"MIT OR Apache-2.0","urls":["bzz-raw://8710de867869bbaa30c99ce329ec65fa67768831ad9a0d117c3dc488b6b22376","dweb:/ipfs/QmWpocCKhaAAJzhboHgmZyGWsbAjSKAMQsa5UhDYB6LsJN"]},"vault/nomad/NomadBase.sol":{"keccak256":"0x2cb0c4eb4c499a947ed221dc7de88e0922be6509b1132b46431b0ffe0c8e2aaf","license":"MIT OR Apache-2.0","urls":["bzz-raw://7684740e712522aa97028a8c373d30ce225a756a64cdfaefb919bd1fe05999e6","dweb:/ipfs/Qmcf9QvJo9QbGkAS92DnaXemUX9XkXdEWjmkd9gQjogFoo"]},"vault/nomad/Queue.sol":{"keccak256":"0xf4ce75ed377fbbfa4489f5e3697111e90ce27e0c7fb0750fe4a03144dda46b80","license":"MIT OR Apache-2.0","urls":["bzz-raw://41604799d79065bd904cfef59af69c0d12e323ca79987bd600cba667fc04b427","dweb:/ipfs/QmbL4qCAu4FeSnq3JrsKnA9VcoikiuZocSwKYXpGtdv3qL"]},"vault/nomad/Replica.sol":{"keccak256":"0xef03d37a5cacf8476599f9269bd5b5e26bc094d8cf4c75d4a7bcd3d0d15a2fd5","license":"MIT OR Apache-2.0","urls":["bzz-raw://e8d26fc806d6f024856b46928f1f0725f606ffd30bbfd669f0a3b4b31c594290","dweb:/ipfs/QmbR5Zz8oorfRvCtRvhAFMN1w3JQWy4Bc4zZj9FCnNcRhC"]},"vault/nomad/Router.sol":{"keccak256":"0xcc02b4847ecee0dcba7fb94111ccd6cc3322d2d0b30c3ee6455000ba381db2cf","license":"MIT OR Apache-2.0","urls":["bzz-raw://809bdb015094de34f0ef90fc6b346842da27a2a52f01cd487f64ea9b9f1f7551","dweb:/ipfs/QmXf24rmY3q5ujvq1M9RYCdoi1o93QnzEsMwN5tPjUVH8C"]},"vault/nomad/TokenRegistry.sol":{"keccak256":"0x27ca6c88410ba7ea9f67bd7ced0162b356c335c8ba4a29354e88f701fb6c4e68","license":"MIT OR Apache-2.0","urls":["bzz-raw://fdff671281148679806ad75578e9294f8eb906d4dbdc5c48a13c2385d6256ae9","dweb:/ipfs/QmRL5QxYArQLnkWHm5zd3ZgR3qub9jNhVTk2VEwavQDLUR"]},"vault/nomad/Version0.sol":{"keccak256":"0xc102ed18474a58833454fd37fc46473c88235b66cc7997aa71cad52e15314eb7","license":"MIT OR Apache-2.0","urls":["bzz-raw://4ea2a31a323f350e0976f8401602ec83fd2376d74c01e04b57d3c87ea223d269","dweb:/ipfs/QmQ7q9LZooNmRKKsVohNiLvFCkP1P78AuDs94UbbiEFaon"]},"vault/nomad/XAppConnectionClient.sol":{"keccak256":"0x32d2fd767d7ae720f8b8a9e78d3c6163f91eca808edb1786d9ce13f694cbc08d","license":"MIT OR Apache-2.0","urls":["bzz-raw://c6a98135b56560c4f121b426745c4777c8e9196410a7165f7949b294faf55843","dweb:/ipfs/QmdasanwE4PGd7zRvneVLSX3uAwu85MNXfFMJUvPetuWpP"]},"vault/nomad/XAppConnectionManager.sol":{"keccak256":"0x9a19d05c0cdb3fddf162d04c216b953efd522ea195204b5fd30514ba029616a4","license":"MIT OR Apache-2.0","urls":["bzz-raw://31a71400504ba25404f8be7612c68062c9a111e7d0546577c146cfa832dd2f8a","dweb:/ipfs/QmZtNvZf12eyTfdVwYRmSPuhPG5SSZUUo22AKaBt7MQJL4"]},"vault/vendor/v0.8/Address.sol":{"keccak256":"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a","license":"MIT","urls":["bzz-raw://39a05eec7083dfa0cc7e0cbfe6cd1bd085a340af1ede93fdff3ad047c5fb3d8e","dweb:/ipfs/QmVApz5fCUq2QC8gKTsNNdCmcedJ3ETHp68zR5N3WUKS4r"]},"vault/vendor/v0.8/AddressUpgradeable.sol":{"keccak256":"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d","license":"MIT","urls":["bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f","dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"]},"vault/vendor/v0.8/Context.sol":{"keccak256":"0xbe2b1abcfaee001c5a4ae3b5274803e3f84e1312b1ef7e09265e040beac9c54a","license":"MIT","urls":["bzz-raw://3ab4a5f558658737bb61d1fa85a7d82acae467302fc8a4ef40dccfcf527a8688","dweb:/ipfs/QmaU2BAcwpgaBiKMcEK2f3rDg51ikwLh61sT9uU76XF6as"]},"vault/vendor/v0.8/ContextUpgradeable.sol":{"keccak256":"0x741fb9edb83675bd6b0dd0aa5a267d06b54cc1b93e91ae85deadfd7f7388c9fa","license":"MIT","urls":["bzz-raw://87c2beebb42f26c7b2cf81ba77909b1f441428b4ce9b6af2a9b5d967c3725283","dweb:/ipfs/QmaFtVEJusZXw9Z1XfwxHgfVW9xMFcihHRCqxZYQS9QSTe"]},"vault/vendor/v0.8/ECDSA.sol":{"keccak256":"0x46a0a615f0e2c10c54266e72fcb5c6e726f7e94100f0e79d6ed967ffb0c6c74f","license":"MIT","urls":["bzz-raw://9defa5a8c1b084c25615b2d2a627fc14bbe6bfdb7552ce437a6de7c3ebf6c55d","dweb:/ipfs/QmWgYRyBB5jZahVXgkU7dv4rB2DZqjXYMLNWSk5UVuhXX4"]},"vault/vendor/v0.8/ECDSAUpgradeable.sol":{"keccak256":"0xeb865296245774b9503db5c8c6c7935e1a5aeac5d64b9c76cc84fd5805725b4a","license":"MIT","urls":["bzz-raw://9ca2aa15e6d2ef64b142206c72f905daee331283b3efb361f447bfbfc0d9c461","dweb:/ipfs/QmVi8fzyS41n2dRf9hYRLbvAXwHzD8fyfU2Hk9uiXhzGaD"]},"vault/vendor/v0.8/IERC20.sol":{"keccak256":"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da","license":"MIT","urls":["bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b","dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"]},"vault/vendor/v0.8/IERC20Upgradeable.sol":{"keccak256":"0xce8be5db5e3c4efaef7677186cb624991695a59c2e9c5d2361344514423fb9cf","license":"MIT","urls":["bzz-raw://19b795af0e8299a0568873e70362cba35c16acf53d163707b010d099b6d0e10c","dweb:/ipfs/QmaNouPTAYYMiQeFGvBUAroDNntJqFNbzpD7oANWYMC21H"]},"vault/vendor/v0.8/Initializable2.sol":{"keccak256":"0xec89b5103f4587ed7c2a8ac74c161d290b9b3117c259df962f7f86cc7e6fb017","license":"MIT","urls":["bzz-raw://a22fa5a2787ba96c5fc4d92e38e6bc1ab0f8197f96ed723264f10b66e4ea60fb","dweb:/ipfs/QmTarMFTBCvmwvn1PPA8DLBARngs9WNSdDDeASV9nPb4r4"]},"vault/vendor/v0.8/Ownable.sol":{"keccak256":"0xc9798f4a9c08aa45233d47fa103d1d6ba7c74edcf5a9900c209fe417aef11985","license":"MIT","urls":["bzz-raw://020d5154c18f8d4cd1902f625c5c61fea7417994a02d64f7b9840847dc085e07","dweb:/ipfs/QmUfSTCN8oPqDsF9JAdxNrTmLin21tS8daCFV4cFczicRA"]},"vault/vendor/v0.8/OwnableUpgradeable.sol":{"keccak256":"0x7206c9d97f58333bbc92bc81ecce6a9fa06e4df4f6cb6b21dd03356d9a80c366","license":"MIT","urls":["bzz-raw://241805ddf7e86be41a2ed1689f52c4afc6c444417233d94022ff733ad1f052fc","dweb:/ipfs/QmVJ35dZjUhtihZkNS4Jd5pM2YpsZGwber2DfV7ZJ5Xeab"]},"vault/vendor/v0.8/ReentrancyGuardUpgradeable.sol":{"keccak256":"0xed7635f0fbe9a0d9a932a0c3824cb8c9dabce5e6703cc8e2c8821f46ce9d69c6","license":"MIT","urls":["bzz-raw://cce0cc6fe1f13c8c752a7cb1fcc0fbad0a402d52526199a5b38d4e70cdbfd5ca","dweb:/ipfs/QmdPsE5gcpV9kJfq7hL4CTdeUNufwMNNavNfcdNCfizWfG"]},"vault/vendor/v0.8/SafeERC20Upgradeable.sol":{"keccak256":"0x29170c9b007b4e9664a6ef8f8bcd2562abe421d41c760433a2fc175ebfe633a3","license":"MIT","urls":["bzz-raw://828a49296a2cf3f2c4d9a0df749e2f90f319bde6ef8a481a4aea1a17d2fefd45","dweb:/ipfs/Qma5keNi9JSkEBUcpyDK3m4iBucyhftFxqwtKwiUTJxSed"]},"vault/vendor/v0.8/Strings.sol":{"keccak256":"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d","license":"MIT","urls":["bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e","dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7"]},"vault/vendor/v0.8/StringsUpgradeable.sol":{"keccak256":"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37","license":"MIT","urls":["bzz-raw://8b268304e03daf22c349abe3c318bc6a6badd6542d62311716ab401eec745f78","dweb:/ipfs/QmNYy2sc2RoTjDhyT6HAibmeDGqfhDiDpsWRbHFHoGVHLr"]},"vault/vendor/v0.8/UpgradeBeaconProxy.sol":{"keccak256":"0x0a2cc30795cfb6ffcc6cb4e261c1d8c953ad17019cd3b593e118c01b36836411","license":"MIT","urls":["bzz-raw://d59300995026e8a1b267751c7f93d8bfd2746d827440c96635ccd838a0f848d4","dweb:/ipfs/QmNdpsBSHj3AS2j11oWhT8qYjjWpFsSWGAn7mHZfVgJncz"]}},"version":1}