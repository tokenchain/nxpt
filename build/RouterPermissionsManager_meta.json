{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"acceptProposedRouterOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"}],"name":"approvedRouters","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"proposed","type":"address"}],"name":"proposeRouterOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"proposedRouterOwners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"proposedRouterTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"routerOwners","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_router","type":"address"}],"name":"routerRecipients","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"setRouterRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptProposedRouterOwner(address)":{"params":{"router":"Router address to set recipient"}},"proposeRouterOwner(address,address)":{"params":{"proposed":"Proposed owner Address to set to router","router":"Router address to set recipient"}},"setRouterRecipient(address,address)":{"details":"Router should only be able to set this once otherwise if router key compromised, no problem is solved since attacker could just update recipient","params":{"recipient":"Recipient Address to set to router","router":"Router address to set recipient"}}},"version":1},"userdoc":{"kind":"user","methods":{"acceptProposedRouterOwner(address)":{"notice":"New router owner must accept role, or previous if proposed is 0x0"},"proposeRouterOwner(address,address)":{"notice":"Current owner or router may propose a new router owner"},"setRouterRecipient(address,address)":{"notice":"Sets the designated recipient for a router"}},"notice":"This contract is designed to manage router access, meaning it maintains the router recipients, owners, and the router whitelist itself. It does *not* manage router balances as asset management is out of scope of this contract. As a router, there are three important permissions: `router` - this is the address that will sign bids sent to the sequencer `routerRecipient` - this is the address that receives funds when liquidity is withdrawn `routerOwner` - this is the address permitted to update recipients and propose new owners In cases where the owner is not set, the caller should be the `router` itself. In cases where the `routerRecipient` is not set, the funds can be removed to anywhere. When setting a new `routerOwner`, the current owner (or router) must create a proposal, which can be accepted by the proposed owner after the delay period. If the proposed owner is the empty address, then it must be accepted by the current owner.","version":1}},"settings":{"compilationTarget":{"vault/connext/RouterPermissionsManager.sol":"RouterPermissionsManager"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":10000},"remappings":[]},"sources":{"vault/connext/RouterPermissionsManager.sol":{"keccak256":"0xac900f0fafa71196a42320c7adbc1ed8231b4949447ddd678ef99f8d475b6e9e","license":"UNLICENSED","urls":["bzz-raw://dc49b79494645269a88b3caefb1e1ec4d105ca9e5678f7462f819d37a9194e5c","dweb:/ipfs/Qmexj5qQ9AVvoa2epyjvqYyzV6HD3DkzTfrFSxcqci97vC"]},"vault/connext/RouterPermissionsManagerLogic.sol":{"keccak256":"0x50ec5d8cd07ecc8b42b2546b85bbde2bb11c61981e1dda5a8b9fe852a31f2e0e","license":"UNLICENSED","urls":["bzz-raw://ee7a674225a31e14620b586725fa7a5b52ddcd083994ee1f7e45c5ef18c441ff","dweb:/ipfs/Qme2PpPzvCwmFqDDgZC4ysS6P617NagK8tPt71kFoFTRh4"]},"vault/vendor/v0.8/AddressUpgradeable.sol":{"keccak256":"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d","license":"MIT","urls":["bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f","dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"]},"vault/vendor/v0.8/Initializable2.sol":{"keccak256":"0xec89b5103f4587ed7c2a8ac74c161d290b9b3117c259df962f7f86cc7e6fb017","license":"MIT","urls":["bzz-raw://a22fa5a2787ba96c5fc4d92e38e6bc1ab0f8197f96ed723264f10b66e4ea60fb","dweb:/ipfs/QmTarMFTBCvmwvn1PPA8DLBARngs9WNSdDDeASV9nPb4r4"]}},"version":1}