{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_connext","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transferId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"assetId","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"_properties","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"callData","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"returnData","type":"bytes"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"Executed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_transferId","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address payable","name":"_to","type":"address"},{"internalType":"address","name":"_assetId","type":"address"},{"internalType":"bytes","name":"_properties","type":"bytes"},{"internalType":"bytes","name":"_callData","type":"bytes"}],"name":"execute","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getConnext","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"originSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Connext <support@connext.network>","kind":"dev","methods":{"execute(bytes32,uint256,address,address,bytes,bytes)":{"params":{"_amount":"The amount to approve or send with the call","_assetId":"The assetId of the funds to approve to the contract or send along with the call","_callData":"The data to execute","_properties":"The origin properties","_to":"The address to execute the calldata on","_transferId":"Unique identifier of transaction id that necessitated calldata execution"}},"getConnext()":{"returns":{"_0":"The address of the associated connext contract"}},"origin()":{"details":"These properties are set via reentrancy a la L2CrossDomainMessenger from optimism"},"originSender()":{"details":"These properties are set via reentrancy a la L2CrossDomainMessenger from optimism"}},"title":"Executor","version":1},"userdoc":{"kind":"user","methods":{"execute(bytes32,uint256,address,address,bytes,bytes)":{"notice":"Executes some arbitrary call data on a given address. The call data executes can be payable, and will have `amount` sent along with the function (or approved to the contract). If the call fails, rather than reverting, funds are sent directly to some provided fallback address"},"getConnext()":{"notice":"Returns the connext contract address (only address that can call the `execute` function)"},"origin()":{"notice":"Allows a `_to` contract to access origin domain (i.e. domain of `xcall`)"},"originSender()":{"notice":"Allows a `_to` contract to access origin domain sender (i.e. msg.sender of `xcall`)"}},"notice":"This library contains an `execute` function that is callabale by an associated Connext contract. This is used to execute arbitrary calldata on a receiving chain.","version":1}},"settings":{"compilationTarget":{"vault/interpreters/Executor.sol":"Executor"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":10000},"remappings":[]},"sources":{"vault/interfaces/IExecutor.sol":{"keccak256":"0xd3a3226f2f374a926ada70085a43f01e4c322e12f9568e82092ec0e5dbbd959f","license":"UNLICENSED","urls":["bzz-raw://4064200011d864e1767f14ad1bd0eef75c29b0451a09c82bf39ccadc355eefdb","dweb:/ipfs/QmebDzUY8rDMoKbL94LX8McLVUhEj3vfy2W1MSrkzgiLQB"]},"vault/interpreters/Executor.sol":{"keccak256":"0xc6e922016311e3ec6ee8b8b6521bc61bdb955a084e9da307f95e4fdc71e925be","license":"UNLICENSED","urls":["bzz-raw://7854fee8139d43ebb303a1949411dce530e8b2ee51bfdefa46bf94747eda7c4d","dweb:/ipfs/QmbZCoJfhcRcbiX2p4j1ygi9SA7DBxcnHKYgeZGzeeRzaq"]},"vault/lib/LibCrossDomainProperty.sol":{"keccak256":"0x41befd62e204cf8ba36be4bba7c37407d0dd5ff5776c46cff26edd34ef74acfd","license":"UNLICENSED","urls":["bzz-raw://80dc1261dc63f96fabc06e6d88e1fc9c92f653754e885b2ecbdc8b571ec2d4ed","dweb:/ipfs/QmSautXuJUqqGEa2ETgDtKTxxbvuP6fnZ1PYcGEx2YrBhi"]},"vault/lib/TypedMemView.sol":{"keccak256":"0xaaa1d49d3ca939e49b369adcf5bf028d0d259821af57d4fa4229177eb8932936","license":"MIT OR Apache-2.0","urls":["bzz-raw://10691d24a257dc2e79cd779812c52571474239c9b1989fc63a803d5936b14fec","dweb:/ipfs/QmVERCmFdsEeuVpS2BxvJUttRaaDf6W7FjQJRFX2qnBU98"]},"vault/vendor/v0.8/AddressUpgradeable.sol":{"keccak256":"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d","license":"MIT","urls":["bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f","dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"]},"vault/vendor/v0.8/IERC20Upgradeable.sol":{"keccak256":"0xce8be5db5e3c4efaef7677186cb624991695a59c2e9c5d2361344514423fb9cf","license":"MIT","urls":["bzz-raw://19b795af0e8299a0568873e70362cba35c16acf53d163707b010d099b6d0e10c","dweb:/ipfs/QmaNouPTAYYMiQeFGvBUAroDNntJqFNbzpD7oANWYMC21H"]},"vault/vendor/v0.8/SafeERC20Upgradeable.sol":{"keccak256":"0x29170c9b007b4e9664a6ef8f8bcd2562abe421d41c760433a2fc175ebfe633a3","license":"MIT","urls":["bzz-raw://828a49296a2cf3f2c4d9a0df749e2f90f319bde6ef8a481a4aea1a17d2fefd45","dweb:/ipfs/Qma5keNi9JSkEBUcpyDK3m4iBucyhftFxqwtKwiUTJxSed"]}},"version":1}