{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_upgradeBeacon","type":"address"},{"internalType":"bytes","name":"_initializationCalldata","type":"bytes"}],"stateMutability":"payable","type":"constructor"},{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage found in 0age's implementation: https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment found in OpenZeppelin's implementation: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol","kind":"dev","methods":{"constructor":{"params":{"_initializationCalldata":"Calldata supplied when calling the initialization function","_upgradeBeacon":"Address of the Upgrade Beacon to be stored immutably in the contract"}}},"title":"UpgradeBeaconProxy","version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Validate that the Upgrade Beacon is a contract, then set its address immutably within this contract. Validate that the implementation is also a contract, Then call the initialization function defined at the implementation. The deployment will revert and pass along the revert reason if the initialization function reverts."}},"notice":"Proxy contract which delegates all logic, including initialization, to an implementation contract. The implementation contract is stored within an Upgrade Beacon contract; the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract. The Upgrade Beacon contract for this Proxy is immutably specified at deployment.","version":1}},"settings":{"compilationTarget":{"vault/vendor/v0.8/UpgradeBeaconProxy.sol":"UpgradeBeaconProxy"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":10000},"remappings":[]},"sources":{"vault/vendor/v0.8/Address.sol":{"keccak256":"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a","license":"MIT","urls":["bzz-raw://39a05eec7083dfa0cc7e0cbfe6cd1bd085a340af1ede93fdff3ad047c5fb3d8e","dweb:/ipfs/QmVApz5fCUq2QC8gKTsNNdCmcedJ3ETHp68zR5N3WUKS4r"]},"vault/vendor/v0.8/UpgradeBeaconProxy.sol":{"keccak256":"0x0a2cc30795cfb6ffcc6cb4e261c1d8c953ad17019cd3b593e118c01b36836411","license":"MIT","urls":["bzz-raw://d59300995026e8a1b267751c7f93d8bfd2746d827440c96635ccd838a0f848d4","dweb:/ipfs/QmNdpsBSHj3AS2j11oWhT8qYjjWpFsSWGAn7mHZfVgJncz"]}},"version":1}