{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"},{"indexed":true,"internalType":"address","name":"representation","type":"address"}],"name":"TokenDeployed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"canonicalToRepresentation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"bytes32","name":"_id","type":"bytes32"},{"internalType":"address","name":"_custom","type":"address"}],"name":"enrollCustom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"ensureLocalToken","outputs":[{"internalType":"address","name":"_local","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_representation","type":"address"}],"name":"getCanonicalTokenId","outputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getLocalAddress","outputs":[{"internalType":"address","name":"_local","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"address","name":"_id","type":"address"}],"name":"getLocalAddress","outputs":[{"internalType":"address","name":"_local","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"getRepresentationAddress","outputs":[{"internalType":"address","name":"_representation","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_local","type":"address"}],"name":"getTokenId","outputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_tokenBeacon","type":"address"},{"internalType":"address","name":"_xAppConnectionManager","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isLocalOrigin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"bytes32","name":"_id","type":"bytes32"}],"name":"mustHaveLocalToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oldRepr","type":"address"}],"name":"oldReprToCurrentRepr","outputs":[{"internalType":"address","name":"_currentRepr","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"representationToCanonical","outputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"name":"setLocalDomain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_xAppConnectionManager","type":"address"}],"name":"setXAppConnectionManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenBeacon","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"xAppConnectionManager","outputs":[{"internalType":"contract XAppConnectionManager","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"TokenDeployed(uint32,bytes32,address)":{"params":{"domain":"the domain of the chain where the canonical asset is deployed","id":"the bytes32 address of the canonical token contract","representation":"the address of the newly locally deployed representation contract"}}},"kind":"dev","methods":{"enrollCustom(uint32,bytes32,address)":{"details":"This is done by inserting the custom representation into the token lookup tables. It is permissioned to the owner (governance) and can potentially break token representations. It must be used with extreme caution. After the token is inserted, new mint instructions will be sent to the custom token. The default representation (and old custom representations) may still be burnt. Until all users have explicitly called migrate, both representations will continue to exist. The custom representation MUST be trusted, and MUST allow the router to both mint AND burn tokens at will.","params":{"_custom":"the address of the custom implementation to use.","_domain":"the domain of the canonical Token to enroll","_id":"the bytes32 ID pf the canonical of the Token to enroll"}},"ensureLocalToken(uint32,bytes32)":{"params":{"_domain":"the token's native domain","_id":"the token's id on its native domain"},"returns":{"_local":"the address of the local token contract"}},"getCanonicalTokenId(address)":{"params":{"_representation":"the address of the representation contract"},"returns":{"_domain":"the domain of the canonical version.","_id":"the identifier of the canonical version in its domain."}},"getLocalAddress(uint32,address)":{"details":"If the token is local, it will return the local address. If the token is non-local and no local representation exists, this will return `address(0)`.","params":{"_domain":"the domain of the canonical version.","_id":"the identifier of the canonical version in its domain."},"returns":{"_local":"the local address of the token contract (representation or canonical)"}},"getLocalAddress(uint32,bytes32)":{"details":"If the token is local, it will return the local address. If the token is non-local and no local representation exists, this will return `address(0)`.","params":{"_domain":"the domain of the canonical version.","_id":"the identifier of the canonical version in its domain."},"returns":{"_local":"the local address of the token contract (representation or canonical)"}},"getRepresentationAddress(uint32,bytes32)":{"params":{"_domain":"the domain of the canonical version.","_id":"the identifier of the canonical version in its domain."},"returns":{"_representation":"the address of the representation contract"}},"getTokenId(address)":{"params":{"_local":"the local address of the token contract (representation or canonical)"},"returns":{"_domain":"canonical domain","_id":"canonical identifier on that domain"}},"isLocalOrigin(address)":{"returns":{"_0":"TRUE if token is locally originating"}},"mustHaveLocalToken(uint32,bytes32)":{"params":{"_domain":"the token's native domain","_id":"the token's id on its native domain"},"returns":{"_0":"the local IERC20 token contract"}},"oldReprToCurrentRepr(address)":{"details":"If _oldRepr is not a representation, this will error.","params":{"_oldRepr":"The address of the old representation token"},"returns":{"_currentRepr":"The address of the current representation token"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setXAppConnectionManager(address)":{"params":{"_xAppConnectionManager":"The address of the xAppConnectionManager contract"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TokenRegistry","version":1},"userdoc":{"events":{"TokenDeployed(uint32,bytes32,address)":{"notice":"emitted when a representation token contract is deployed"}},"kind":"user","methods":{"enrollCustom(uint32,bytes32,address)":{"notice":"Enroll a custom token. This allows projects to work with governance to specify a custom representation."},"ensureLocalToken(uint32,bytes32)":{"notice":"Get the address of the local token for the provided tokenId; if the token is remote and no local representation exists, deploy the representation contract"},"getCanonicalTokenId(address)":{"notice":"Look up the canonical token ID for a representation token"},"getLocalAddress(uint32,address)":{"notice":"Looks up the local address corresponding to a domain/id pair."},"getLocalAddress(uint32,bytes32)":{"notice":"Looks up the local address corresponding to a domain/id pair."},"getRepresentationAddress(uint32,bytes32)":{"notice":"Look up the representation address for a canonical token"},"getTokenId(address)":{"notice":"Return tokenId for a local token address"},"isLocalOrigin(address)":{"notice":"Determine if token is of local origin"},"mustHaveLocalToken(uint32,bytes32)":{"notice":"Return the local token contract for the canonical tokenId; revert if there is no local token"},"oldReprToCurrentRepr(address)":{"notice":"Returns the current representation contract for the same canonical token as the old representation contract"},"setXAppConnectionManager(address)":{"notice":"Modify the contract the xApp uses to validate Replica contracts"}},"notice":"manages a registry of token contracts on this chain - We sort token types as \"representation token\" or \"locally originating token\". Locally originating - a token contract that was originally deployed on the local chain Representation (repr) - a token that was originally deployed on some other chain - When the BridgeRouter handles an incoming message, it determines whether the transfer is for an asset of local origin. If not, it checks for an existing representation contract. If no such representation exists, it deploys a new representation contract. It then stores the relationship in the \"reprToCanonical\" and \"canonicalToRepr\" mappings to ensure we can always perform a lookup in either direction Note that locally originating tokens should NEVER be represented in these lookup tables.","version":1}},"settings":{"compilationTarget":{"vault/nomad/TokenRegistry.sol":"TokenRegistry"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":10000},"remappings":[]},"sources":{"vault/interfaces/IBridgeToken.sol":{"keccak256":"0xc9e5b86c5ed51f25d5443906e81488e4da7ac56a0f908bc605665e139f902be9","license":"MIT OR Apache-2.0","urls":["bzz-raw://54be53be934f5ab2876f87b9dde241a251251cbc4789a1309d43332edb9fe3ef","dweb:/ipfs/QmUKydSHBUCvp8vg5Xc2MJuVeUiVdbHF1qWjD3gAx2w4gs"]},"vault/interfaces/ITokenRegistry.sol":{"keccak256":"0xd51a3c2a9d61a0eb2ba83e5c4fd9f32e529c3898f0b15937d137a07028477ee1","license":"MIT OR Apache-2.0","urls":["bzz-raw://cf6d9b21396326ef2d97f196ab16c81b4dff97ee8ba1b1c01521aebfed952a75","dweb:/ipfs/QmYAfC1gZnyZq225SBTxNpWy8iceWNssgXxoRJp1jcTDoJ"]},"vault/interfaces/IUpdaterManager.sol":{"keccak256":"0xd100254c1e066473d303174ec14615f12122bce35bddc794c0e49d6df95ca0bc","license":"MIT OR Apache-2.0","urls":["bzz-raw://c337cc155f20c4fb126627c503e8ed7f31bf7b0e217d75d9648ca2c254325171","dweb:/ipfs/Qma4RgyFwpJN2GkR7gmJWHS9Sp9m2NwtCtSMsDnMqMQAJS"]},"vault/lib/MerkleLib.sol":{"keccak256":"0xf297da90e669fa6030407ff7218c2e78a109de7c8cd04c0d82d40d1a61a41999","license":"MIT OR Apache-2.0","urls":["bzz-raw://d272de5946822a21c77ef98b835f157424f19348c1938594019f14a3e1140f78","dweb:/ipfs/Qmac25few1VuzwzCBBwX6BoTbcXwoWNBv6Pa26EDjvb5hQ"]},"vault/lib/Message.sol":{"keccak256":"0xe0704a188b84a82fdee9bc0d2ed139649bda554e787cd8482041e262828b0b98","license":"MIT OR Apache-2.0","urls":["bzz-raw://f65535f8dd0f3707249f69befd4c74ef74b7688b578fcabf10e0817bbab409c0","dweb:/ipfs/QmeDpTVVJ4QYnhvTdJfEoXRksACw4tK6xxnZZScciEMmm7"]},"vault/lib/QueueLib.sol":{"keccak256":"0x44f62140867993d5339d1abc00b852a3e38adde65e2f9bda741ab7f3e0f178d3","license":"MIT OR Apache-2.0","urls":["bzz-raw://b5214a9d0bb39939f3d971cdc5e0f344d22884911bd4b3be0bc1945402192db3","dweb:/ipfs/QmZPrrGK4Z5mHdGC3uRMqvYtCnR94XnyudtkzseSE44ChT"]},"vault/lib/TypeCasts.sol":{"keccak256":"0xa572a0757d1408e12330f02797596e6d2315580e872cd4acd681c3ab09555b71","license":"MIT OR Apache-2.0","urls":["bzz-raw://cd9d68a1d7884e6a1f45c392e284aab3ba1e73ff2e6f0bd0fbd023b801c0fc45","dweb:/ipfs/QmVp63N9yUp7dUpnALCYpabZKtdD3ZbXGaBMsL2sn8NeB6"]},"vault/lib/TypedMemView.sol":{"keccak256":"0xaaa1d49d3ca939e49b369adcf5bf028d0d259821af57d4fa4229177eb8932936","license":"MIT OR Apache-2.0","urls":["bzz-raw://10691d24a257dc2e79cd779812c52571474239c9b1989fc63a803d5936b14fec","dweb:/ipfs/QmVERCmFdsEeuVpS2BxvJUttRaaDf6W7FjQJRFX2qnBU98"]},"vault/nomad/BridgeMessage.sol":{"keccak256":"0x0bb5242debd7af9b80f00c48224d4d237e0a6abcdd0d7f59bbca9a0cd21fdf05","license":"MIT OR Apache-2.0","urls":["bzz-raw://d4749bbce9cdf7b84b0c1eaa447e27d3aef4e6a29afd548d8c9698f26e9c082b","dweb:/ipfs/QmYwMT3kEqvF4fVg3eVdHJ9R9HwxAigX3VuPqQjiRFCzGi"]},"vault/nomad/Encoding.sol":{"keccak256":"0xdc5d87e14e3a6340f09000820e1482a1ee994426ae6a54a3601ef7af6758b5c2","license":"MIT OR Apache-2.0","urls":["bzz-raw://40e0956e66b1b2d37f653dd077ad5c3758fef5b23f339f88fd4e0a151ec5fa94","dweb:/ipfs/QmWXzTsm1K23PhGi5a5vreVXE8sU4iiFNnztFYZCDCMstm"]},"vault/nomad/Home.sol":{"keccak256":"0xc9ef0ddbaadbb7546f6647a252aa230189fb37f4641aa6f0b065b603217297f7","license":"MIT OR Apache-2.0","urls":["bzz-raw://bf53197afe80c2cc2212d604a36f2d781f08652b141c9158cc43a0276a3a50b9","dweb:/ipfs/QmeEjJWY4JbmEwQ5zQVTj3secVLna14LF2BC63vptc5eaS"]},"vault/nomad/Merkle.sol":{"keccak256":"0x20a2c4d61c3b0c205e6eb1b047e037f7a37bebb75a5dc72a727969eb8ad7e586","license":"MIT OR Apache-2.0","urls":["bzz-raw://8710de867869bbaa30c99ce329ec65fa67768831ad9a0d117c3dc488b6b22376","dweb:/ipfs/QmWpocCKhaAAJzhboHgmZyGWsbAjSKAMQsa5UhDYB6LsJN"]},"vault/nomad/NomadBase.sol":{"keccak256":"0x2cb0c4eb4c499a947ed221dc7de88e0922be6509b1132b46431b0ffe0c8e2aaf","license":"MIT OR Apache-2.0","urls":["bzz-raw://7684740e712522aa97028a8c373d30ce225a756a64cdfaefb919bd1fe05999e6","dweb:/ipfs/Qmcf9QvJo9QbGkAS92DnaXemUX9XkXdEWjmkd9gQjogFoo"]},"vault/nomad/Queue.sol":{"keccak256":"0xf4ce75ed377fbbfa4489f5e3697111e90ce27e0c7fb0750fe4a03144dda46b80","license":"MIT OR Apache-2.0","urls":["bzz-raw://41604799d79065bd904cfef59af69c0d12e323ca79987bd600cba667fc04b427","dweb:/ipfs/QmbL4qCAu4FeSnq3JrsKnA9VcoikiuZocSwKYXpGtdv3qL"]},"vault/nomad/Replica.sol":{"keccak256":"0xef03d37a5cacf8476599f9269bd5b5e26bc094d8cf4c75d4a7bcd3d0d15a2fd5","license":"MIT OR Apache-2.0","urls":["bzz-raw://e8d26fc806d6f024856b46928f1f0725f606ffd30bbfd669f0a3b4b31c594290","dweb:/ipfs/QmbR5Zz8oorfRvCtRvhAFMN1w3JQWy4Bc4zZj9FCnNcRhC"]},"vault/nomad/TokenRegistry.sol":{"keccak256":"0x27ca6c88410ba7ea9f67bd7ced0162b356c335c8ba4a29354e88f701fb6c4e68","license":"MIT OR Apache-2.0","urls":["bzz-raw://fdff671281148679806ad75578e9294f8eb906d4dbdc5c48a13c2385d6256ae9","dweb:/ipfs/QmRL5QxYArQLnkWHm5zd3ZgR3qub9jNhVTk2VEwavQDLUR"]},"vault/nomad/Version0.sol":{"keccak256":"0xc102ed18474a58833454fd37fc46473c88235b66cc7997aa71cad52e15314eb7","license":"MIT OR Apache-2.0","urls":["bzz-raw://4ea2a31a323f350e0976f8401602ec83fd2376d74c01e04b57d3c87ea223d269","dweb:/ipfs/QmQ7q9LZooNmRKKsVohNiLvFCkP1P78AuDs94UbbiEFaon"]},"vault/nomad/XAppConnectionClient.sol":{"keccak256":"0x32d2fd767d7ae720f8b8a9e78d3c6163f91eca808edb1786d9ce13f694cbc08d","license":"MIT OR Apache-2.0","urls":["bzz-raw://c6a98135b56560c4f121b426745c4777c8e9196410a7165f7949b294faf55843","dweb:/ipfs/QmdasanwE4PGd7zRvneVLSX3uAwu85MNXfFMJUvPetuWpP"]},"vault/nomad/XAppConnectionManager.sol":{"keccak256":"0x9a19d05c0cdb3fddf162d04c216b953efd522ea195204b5fd30514ba029616a4","license":"MIT OR Apache-2.0","urls":["bzz-raw://31a71400504ba25404f8be7612c68062c9a111e7d0546577c146cfa832dd2f8a","dweb:/ipfs/QmZtNvZf12eyTfdVwYRmSPuhPG5SSZUUo22AKaBt7MQJL4"]},"vault/vendor/v0.8/Address.sol":{"keccak256":"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a","license":"MIT","urls":["bzz-raw://39a05eec7083dfa0cc7e0cbfe6cd1bd085a340af1ede93fdff3ad047c5fb3d8e","dweb:/ipfs/QmVApz5fCUq2QC8gKTsNNdCmcedJ3ETHp68zR5N3WUKS4r"]},"vault/vendor/v0.8/AddressUpgradeable.sol":{"keccak256":"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d","license":"MIT","urls":["bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f","dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"]},"vault/vendor/v0.8/Context.sol":{"keccak256":"0xbe2b1abcfaee001c5a4ae3b5274803e3f84e1312b1ef7e09265e040beac9c54a","license":"MIT","urls":["bzz-raw://3ab4a5f558658737bb61d1fa85a7d82acae467302fc8a4ef40dccfcf527a8688","dweb:/ipfs/QmaU2BAcwpgaBiKMcEK2f3rDg51ikwLh61sT9uU76XF6as"]},"vault/vendor/v0.8/ContextUpgradeable.sol":{"keccak256":"0x741fb9edb83675bd6b0dd0aa5a267d06b54cc1b93e91ae85deadfd7f7388c9fa","license":"MIT","urls":["bzz-raw://87c2beebb42f26c7b2cf81ba77909b1f441428b4ce9b6af2a9b5d967c3725283","dweb:/ipfs/QmaFtVEJusZXw9Z1XfwxHgfVW9xMFcihHRCqxZYQS9QSTe"]},"vault/vendor/v0.8/ECDSA.sol":{"keccak256":"0x46a0a615f0e2c10c54266e72fcb5c6e726f7e94100f0e79d6ed967ffb0c6c74f","license":"MIT","urls":["bzz-raw://9defa5a8c1b084c25615b2d2a627fc14bbe6bfdb7552ce437a6de7c3ebf6c55d","dweb:/ipfs/QmWgYRyBB5jZahVXgkU7dv4rB2DZqjXYMLNWSk5UVuhXX4"]},"vault/vendor/v0.8/IERC20.sol":{"keccak256":"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da","license":"MIT","urls":["bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b","dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"]},"vault/vendor/v0.8/Initializable2.sol":{"keccak256":"0xec89b5103f4587ed7c2a8ac74c161d290b9b3117c259df962f7f86cc7e6fb017","license":"MIT","urls":["bzz-raw://a22fa5a2787ba96c5fc4d92e38e6bc1ab0f8197f96ed723264f10b66e4ea60fb","dweb:/ipfs/QmTarMFTBCvmwvn1PPA8DLBARngs9WNSdDDeASV9nPb4r4"]},"vault/vendor/v0.8/Ownable.sol":{"keccak256":"0xc9798f4a9c08aa45233d47fa103d1d6ba7c74edcf5a9900c209fe417aef11985","license":"MIT","urls":["bzz-raw://020d5154c18f8d4cd1902f625c5c61fea7417994a02d64f7b9840847dc085e07","dweb:/ipfs/QmUfSTCN8oPqDsF9JAdxNrTmLin21tS8daCFV4cFczicRA"]},"vault/vendor/v0.8/OwnableUpgradeable.sol":{"keccak256":"0x7206c9d97f58333bbc92bc81ecce6a9fa06e4df4f6cb6b21dd03356d9a80c366","license":"MIT","urls":["bzz-raw://241805ddf7e86be41a2ed1689f52c4afc6c444417233d94022ff733ad1f052fc","dweb:/ipfs/QmVJ35dZjUhtihZkNS4Jd5pM2YpsZGwber2DfV7ZJ5Xeab"]},"vault/vendor/v0.8/Strings.sol":{"keccak256":"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d","license":"MIT","urls":["bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e","dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7"]},"vault/vendor/v0.8/UpgradeBeaconProxy.sol":{"keccak256":"0x0a2cc30795cfb6ffcc6cb4e261c1d8c953ad17019cd3b593e118c01b36836411","license":"MIT","urls":["bzz-raw://d59300995026e8a1b267751c7f93d8bfd2746d827440c96635ccd838a0f848d4","dweb:/ipfs/QmNdpsBSHj3AS2j11oWhT8qYjjWpFsSWGAn7mHZfVgJncz"]}},"version":1}